{"version":3,"sources":["Golfs.js","played.js","UpdateGolf.js","IndivCourse.js","App.js","reportWebVitals.js","index.js"],"names":["props","nameInput","useRef","urlInput","locationInput","scoreInput","dateInput","createGolf","event","a","preventDefault","url","current","value","name","score","location","date","body","JSON","stringify","completed","currentTarget","reset","fetch","method","headers","response","json","data","updateGolfs","golfs","console","log","onSubmit","type","ref","Completed","className","completedItems","map","index","Card","Body","Title","Text","href","target","Button","onClick","removeFromCompleted","updateGolf","id","filteredGolfs","filter","golf","_id","handleToggle","IndivCourse","useState","form","toggleForm","deleteGolf","UpdateGolf","addToCompleted","App","setGolfs","completedList","updateCompleted","fetchGolfs","error","currentGolfs","useEffect","Golfs","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db31e1dd.chunk.js","sourcesContent":["import { useRef } from 'react';\n// import { use } from '../../golf-app-api/controllers/golfs';\n\nexport default (props) => {\n    const nameInput = useRef(null);\n    const urlInput = useRef(null);\n    const locationInput = useRef(null);\n    const scoreInput = useRef(null);\n    const dateInput = useRef(null);\n\n    const createGolf = async (event) => {\n        event.preventDefault()\n        const url = urlInput.current.value;\n        const name = nameInput.current.value;\n        const score = scoreInput.current.value;\n        const location = locationInput.current.value;\n        const date = dateInput.current.value;\n        const completed = false;\n        const body = JSON.stringify({name, url, score, location, completed, date});\n        event.currentTarget.reset();\n        try {\n            const response = await fetch('http://localhost:3000/golfs', {\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: body \n            })\n            const data = await response.json();\n            props.updateGolfs([...props.golfs, data])\n        } catch (error){\n            console.log(error)\n        }\n    }\n    \n    \n    \n    return (\n        <form onSubmit={createGolf}>\n         <label>GOLF COURSE: <input type=\"text\" name=\"title\" ref={nameInput} /><br/></label> \n         <label>URL WEBSITE: <input type=\"text\" name=\"url\" ref={urlInput} /><br/></label> \n         <label>SCORE: <input type=\"number\" name=\"score\" ref={scoreInput} /><br/></label>\n         <label>LOCATION: <input type=\"text\" name=\"location\" ref={locationInput}/><br/></label>\n         <label>DATE PLAYED: <input type=\"date\" name=\"date\" ref={dateInput}/></label>\n            <input type=\"submit\" value=\"Create Bucket-List\"/> \n        </form>\n    )\n}","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\n\nconst Completed = (props) => {\n    return (\n        <div className=\"completedCourses\">\n            <h4>COMPLETED COURSES</h4>\n            <ul className=\"completed\">\n                {\n                    props.completedItems.map((golfs, index) => {\n                        if (golfs.completed === true) {\n                            return <li>\n                                <Card>\n                                    <Card.Body>\n                                        <Card.Title> COURSE: {golfs.name} </Card.Title>\n                                        <Card.Text> LOCATION: {golfs.location} </Card.Text>\n                                        <Card.Text> SCORE: {golfs.score} </Card.Text>\n                                        <Card.Text> {golfs.date} </Card.Text>\n                                        <Card.Text><a href={golfs.url} target=\"_blank\" > GOLF COURSE WEBSITE </a></Card.Text>\n                                        <Button className=\"btn-dark btn-base\" onClick={()=> props.removeFromCompleted(index)}>DELETE PLAYED COURSE</Button>\n                                    </Card.Body>\n                                </Card>\n                            </li>\n                        }\n                        \n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default Completed;","import { useRef } from 'react';\n\nexport default (props) => {\n    const nameInput = useRef(null);\n    const urlInput = useRef(null);\n    const scoreInput = useRef(null);\n    const locationInput = useRef(null);\n    const dateInput = useRef(null);\n    \n\n    const updateGolf = async (event) => {\n        event.preventDefault()\n        const url = urlInput.current.value;\n        const name = nameInput.current.value;\n        const score = scoreInput.current.value;\n        const location = locationInput.current.value;\n        const date = dateInput.current.value;\n        const body = JSON.stringify({name, url, score, location, date});\n        // console.log(body);\n       \n        try {\n            const response = await fetch(`http://localhost:3000/golfs/${props.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: body \n            })\n            const data = await response.json();\n            const filteredGolfs = props.golfs.filter(golf => golf._id !== data._id)\n            props.updateGolf([...filteredGolfs, data])\n            props.handleToggle()\n        } catch (error){\n            console.log(error)\n        }\n    }\n    \n    \n    \n    return (\n        <form onSubmit={updateGolf}>\n         <label> UPDATE NAME: <input type=\"text\" name=\"name\" ref={nameInput} /><br/></label> \n         <label> UPDATE URL: <input type=\"text\" name=\"url\" ref={urlInput} /><br/></label> \n         <label> UPDATE SCORE: <input type=\"number\" name=\"score\" ref={scoreInput} /><br/></label>\n         <label> UPDATE LOCATION: <input type=\"text\" name=\"location\" ref={locationInput} /><br/></label>\n         <label> UPDATE DATE PLAYED: <input type=\"date\" name=\"location\" ref={dateInput} /></label>\n            <input type=\"submit\" value=\"Update Golf Course\"/> \n        </form>\n    )\n}\n\n","import Button from 'react-bootstrap/Button';\nimport UpdateGolf from './UpdateGolf';\nimport {useState} from 'react'\n\nconst IndivCourse = (props) => {\n    const [form, toggleForm] = useState(false);\n    const handleToggle = () => {\n        toggleForm(!form)\n      }\n    return (\n        <li key={props.id} className=\"Courses\"> {props.name}<br/>\n               {/* <button onClick={\n                 (event) => {\n                   deleteGolf(golfs._id)\n                 } */}\n               {/* }>DELETE {golfs.name}</button> */}\n               <Button  className=\"btn-dark btn-base\" onClick={\n                 (event) => {\n                   props.deleteGolf(props.id)\n                 }\n               }>DELETE {props.name}</Button>\n               {/* <button onClick={\n                 (event) => {\n                   \n                 }\n               }>Update Golf Stuff</button> */}\n               { form ? <>\n                 <UpdateGolf \n                  updateGolf={props.updateGolf} \n                  golfs={props.golfs}\n                  id={props.id}\n                  name={props.name}\n                  url={props.url}\n                  score={props.score}\n                  location={props.location}\n                  date={props.date}\n                  deleteGolf={props.deleteGolf}\n                  handleToggle={handleToggle}\n                   /> \n                   <Button className=\"btn-dark btn-base\" onClick={\n                       (event) => {\n                           handleToggle()\n                       }\n                   } >CLOSE EDIT FORM</Button>\n                   </>\n                    : <Button className=\"btn-dark btn-base\" onClick={\n                     (event) => {\n                       handleToggle()\n                     }\n                   } >EDIT INFO</Button>}\n                   <Button className=\"btn-dark btn-base\" onClick={\n                     (event) => {\n                       props.addToCompleted(props.index)\n                     }\n                   } >MOVE TO COMPLETED COURSES</Button>\n               </li>\n    )\n}\n\n\nexport default IndivCourse;","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Golfs from './Golfs';\nimport Completed from './played';\n// import Button from 'react-bootstrap/Button';\nimport IndivCourse from './IndivCourse';\n// import { set } from 'mongoose';\n\nfunction App() {\n    const [golfs, setGolfs] = useState([]);\n    const [name, setName] = useState('');\n    \n    const [completedList, updateCompleted] = useState([]);\n    // const [completed, setCompleted] = useState(false);\n   \n     // Read\n     const fetchGolfs = async () => {\n      try{\n        const response = await fetch('http://localhost:3000/golfs');\n        const data = await response.json();\n        setGolfs(data)\n      }catch (error) {\n        console.error(error)\n      }\n    }\n    // // Update\n    // const updateGolfs = async (id) => {\n    //   console.log(id);\n    //   try {\n    //     const response = await fetch(`http://localhost:3000/golfs/${id}`, {\n    //       method: 'PUT',\n    //       headers: {\n    //         'Content-type' : 'application/json', \n    //       },\n    //       body: JSON.stringify({url: \"google.com\"})\n    //     })\n    //     const data= await response.json();\n    //     const filteredGolfs = golfs.filter(golf => golf._id !== data._id)\n    //     setGolfs([...filteredGolfs, data]);\n    //   }catch(error){\n    //     console.log(error)\n    //   }\n    // }\n    // Delete\n    const deleteGolf = async (id) => {\n      try {\n        const response = await fetch(`http://localhost:3000/golfs/${id}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-type' : 'application/json', \n            \n          }\n        })\n        const data = await response.json();\n        const filteredGolfs = golfs.filter(golf => golf._id !== data._id)\n        setGolfs(filteredGolfs);\n      } catch(error) {\n        console.error(error)\n      }\n    }\n  \n    const handleSubmit = (e) => {\n      e.preventDefault();\n      const newGolf= {\n        name: name,\n        completed: false\n        \n        \n      }\n      setGolfs([...golfs, newGolf]);\n    setName('');\n    \n    }\n  \n    const addToCompleted = (index) => {\n        \n      const currentGolfs = golfs[index];\n      console.log(currentGolfs);\n      currentGolfs.completed = true;\n      // toggleForm(true);\n      updateCompleted([...completedList, currentGolfs]);\n}\n    \nconst removeFromCompleted = (index) => {\n  updateCompleted([...completedList.slice(0,index), ...completedList.slice(index + 1)]);\n}\n    \n    \n    \n    useEffect(() => {\n      fetchGolfs()\n      // toggleForm()\n      console.log('use effect')\n     }, []);\n    \n    \n    return (\n      <div className=\"App\">\n      <header>\n       <h1>Golf Bucket-List</h1>\n       <h2>Scrapbook your golfing adventures.\n       Remember the good times and the courses you've played!</h2>\n        <Golfs updateGolfs={setGolfs} golfs={golfs} addToCompleted={addToCompleted}/> \n       {/* <Golfs golfs={golfs} */}\n       {/* addToCompleted={addToCompleted}/> */}\n       <ul>\n         {\n           golfs.map((golf, index) => {\n             if(golf.completed === false) {\n              return (\n                <IndivCourse \n                  updateGolf={setGolfs} \n                  golfs={golfs}\n                  id={golf._id}\n                  name={golf.name}\n                  url={golf.url}\n                  score={golf.score}\n                  location={golf.location}\n                  date={golf.date}\n                  deleteGolf={deleteGolf}\n                  addToCompleted={addToCompleted}\n                  index={index}\n                />\n              )\n             }else {\n               return\n             }\n             \n           })\n         }\n       </ul>\n       <Completed completedItems={completedList} removeFromCompleted={removeFromCompleted} />\n       <h3>@TM TooGood Enterprises</h3>\n       </header>\n      </div>\n     \n    );\n  }\n  \n  export default App;\n  \n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}